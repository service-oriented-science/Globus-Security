From b11960fbd944635d6f3b386ed53991a2d9520009 Mon Sep 17 00:00:00 2001
From: Rachana Ananthakrishnan <ranantha@mcs.anl.gov>
Date: Mon, 7 Dec 2009 16:13:36 -0600
Subject: [PATCH 3/8] filebasedobject rework take1


Signed-off-by: Rachana Ananthakrishnan <ranantha@mcs.anl.gov>
---
 .../filestore/FileBasedCertKeyCredential.java      |    5 ++
 .../security/provider/FileBasedKeyStore.java       |   65 ++++++++++++--------
 2 files changed, 45 insertions(+), 25 deletions(-)

diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java
index bed85c1..9fdf282 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java
@@ -51,4 +51,9 @@ public class FileBasedCertKeyCredential extends MultipleFileBasedObject<X509Cred
             throw new FileStoreException(e);
         }
     }
+
+    public X509Credential getCredential() throws FileStoreException {
+        X509Credential credential = getObject();
+        return credential;
+    }
 }
diff --git a/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java b/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java
index a9fdff6..6d4d795 100644
--- a/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java
+++ b/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java
@@ -26,12 +26,13 @@ import java.util.Properties;
 
 import org.globus.security.CredentialException;
 import org.globus.security.X509Credential;
+import org.globus.security.filestore.FileBasedCertKeyCredential;
 import org.globus.security.filestore.FileBasedKeyStoreParameters;
+import org.globus.security.filestore.FileBasedObject;
 import org.globus.security.filestore.FileBasedProxyCredential;
 import org.globus.security.filestore.FileBasedStore;
 import org.globus.security.filestore.FileBasedTrustAnchor;
 import org.globus.security.filestore.FileStoreException;
-import org.globus.security.filestore.SingleFileBasedObject;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -59,17 +60,23 @@ public class FileBasedKeyStore extends KeyStoreSpi {
     public static final String CERTIFICATE_FILENAME = "certificateFilename";
     // Key, typically private key, accompanying the certificate
     public static final String KEY_FILENAME = "keyFilename";
-    // X.509 PRoxy Cerificate file name
+    // X.509 PRoxy Certificate file name
     public static final String PROXY_FILENAME = "proxyFilename";
 
     // Map from alias to the object (either key or certificate)
-    private Map<String, SingleFileBasedObject> aliasObjectMap =
-            new Hashtable<String, SingleFileBasedObject>();
+    private Map<String, FileBasedObject> aliasObjectMap =
+            new Hashtable<String, FileBasedObject>();
+
+
+    // FIXME: I don't see the need for these two objects. In all usages of this, the FileBasedObject is obtained
+    // from the aliasObjectMap. The only piece I would change is to have an indication of what kind of entry this is.
+    // KeyStore.KeyEntry. SO single map of alias->{FileBasedObjct and KeyEntry}. For efficiency, a separate maps for keys
+    // and trusted certs are acceptable
     // Map from trusted certificate to filename
-    private Map<Certificate, String> certFilenameMap =
+    private Map<Certificate, String> trustedCertFilenameMap =
             new HashMap<Certificate, String>();
     // Map from proxy certificate to filename
-    private Map<X509Credential, String> proxyFilenameMap =
+    private Map<X509Credential, String> certKeyFilenameMap =
             new HashMap<X509Credential, String>();
 
     // default directory for trusted certificates
@@ -82,7 +89,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
 
     private FileBasedProxyCredential getKeyEntry(String alias) {
 
-        SingleFileBasedObject object = this.aliasObjectMap.get(alias);
+        FileBasedObject object = this.aliasObjectMap.get(alias);
         if ((object != null) &&
                 (object instanceof FileBasedProxyCredential)) {
             return (FileBasedProxyCredential) object;
@@ -93,7 +100,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
 
     private FileBasedTrustAnchor getCertificateEntry(String alias) {
 
-        SingleFileBasedObject object = this.aliasObjectMap.get(alias);
+        FileBasedObject object = this.aliasObjectMap.get(alias);
         if ((object != null) &&
                 (object instanceof FileBasedTrustAnchor)) {
             return (FileBasedTrustAnchor) object;
@@ -133,25 +140,27 @@ public class FileBasedKeyStore extends KeyStoreSpi {
             IOException,
             NoSuchAlgorithmException,
             CertificateException {
-        for (SingleFileBasedObject object : this.aliasObjectMap.values()) {
-            File file = object.getFile();
+        for (FileBasedObject object : this.aliasObjectMap.values()) {
             try {
                 if (object instanceof FileBasedTrustAnchor) {
+                    File file = ((FileBasedTrustAnchor) object).getFile();
                     FileBasedTrustAnchor desc = (FileBasedTrustAnchor) object;
                     if (file == null) {
-                        String filename = this.certFilenameMap.get(desc.getTrustAnchor().getTrustedCert());
+                        String filename = this.trustedCertFilenameMap.get(desc.getTrustAnchor().getTrustedCert());
                         file = new File(this.defaultDirectory, filename + ".0");
                     }
                     writeCertificate(desc.getTrustAnchor().getTrustedCert(), file);
                 } else if (object instanceof FileBasedProxyCredential) {
+                    File file = ((FileBasedProxyCredential) object).getFile();
                     FileBasedProxyCredential proxy = (FileBasedProxyCredential) object;
                     X509Credential credential = proxy.getCredential();
                     if (file == null) {
-                        String filename = this.proxyFilenameMap.get(credential);
+                        String filename = this.certKeyFilenameMap.get(credential);
                         file = new File(this.defaultDirectory, filename + ".pem");
                     }
                     credential.writeToFile(file);
                 }
+                // FIXME: add cert and key
             } catch (FileStoreException e) {
                 throw new CertificateException(e);
             }
@@ -179,7 +188,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
 
     @Override
     public String engineGetCertificateAlias(Certificate certificate) {
-        return this.certFilenameMap.get(certificate);
+        return this.trustedCertFilenameMap.get(certificate);
     }
 
     @Override
@@ -231,8 +240,6 @@ public class FileBasedKeyStore extends KeyStoreSpi {
 
         } catch (FileStoreException e) {
             throw new CertificateException(e);
-        } catch (CredentialException e) {
-            throw new CertificateException(e);
         }
     }
 
@@ -286,9 +293,6 @@ public class FileBasedKeyStore extends KeyStoreSpi {
                 }
             } catch (FileStoreException e) {
                 throw new CertificateException(e);
-            } catch (CredentialException e) {
-                e.printStackTrace();
-                throw new CertificateException(e);
             }
         } finally {
             try {
@@ -311,17 +315,27 @@ public class FileBasedKeyStore extends KeyStoreSpi {
                 proxyDelegate.getWrapperMap();
         for (FileBasedProxyCredential credential : wrapperMap.values()) {
             this.aliasObjectMap.put(proxyFilename, credential);
+            this.certKeyFilenameMap.put(credential.getCredential(), proxyFilename);
         }
+
     }
 
 
     private void loadCertificateKey(String userCertFilename, String userKeyFilename)
-            throws CredentialException {
+            throws FileStoreException {
 
         if ((userCertFilename == null) ||
                 (userKeyFilename == null)) {
             return;
         }
+
+        // FIXME: for proxy and this, a delegate that looks at multiple locations doesn't make sense.
+        FileBasedCertKeyCredential credential = new FileBasedCertKeyCredential(userCertFilename, userKeyFilename);
+        // What do we name this alias?
+        String alias = userCertFilename + ":" + userKeyFilename;
+        this.aliasObjectMap.put(alias, credential);
+        this.certKeyFilenameMap.put(credential.getCredential(), )
+
         // FIXME: Here the credential needs to be loaded and added to the Map.
     }
 
@@ -334,7 +348,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
         for (FileBasedTrustAnchor trustAnchor : wrapperMap
                 .values()) {
             String alias = trustAnchor.getFile().getName();
-            certFilenameMap
+            trustedCertFilenameMap
                     .put(trustAnchor.getTrustAnchor().getTrustedCert(),
                             alias);
             this.aliasObjectMap.put(alias, trustAnchor);
@@ -344,7 +358,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
     @Override
     public void engineDeleteEntry(String s) throws KeyStoreException {
 
-        SingleFileBasedObject object = this.aliasObjectMap.remove(s);
+        FileBasedObject object = this.aliasObjectMap.remove(s);
         if (object != null) {
             if (object instanceof FileBasedTrustAnchor) {
 
@@ -355,7 +369,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
                 } catch (FileStoreException e) {
                     throw new KeyStoreException(e);
                 }
-                this.certFilenameMap.remove(cert);
+                this.trustedCertFilenameMap.remove(cert);
                 boolean success = descriptor.getFile().delete();
                 if (!success) {
                     // FIXME: warn? throw error?
@@ -370,13 +384,14 @@ public class FileBasedKeyStore extends KeyStoreSpi {
                 } catch (FileStoreException e) {
                     throw new KeyStoreException(e);
                 }
-                this.proxyFilenameMap.remove(credential);
+                this.certKeyFilenameMap.remove(credential);
                 boolean success = proxy.getFile().delete();
                 if (!success) {
                     // FIXME: warn? throw error?
                     logger.info("Unable to delete credential");
                 }
             }
+            // FIXME: add cert and key
         }
     }
 
@@ -411,7 +426,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
             credential.writeToFile(file);
             FileBasedProxyCredential fileCred = new FileBasedProxyCredential(file.getName(), credential);
             this.aliasObjectMap.put(s, fileCred);
-            this.proxyFilenameMap.put(credential, s);
+            this.certKeyFilenameMap.put(credential, s);
         } catch (FileStoreException e) {
             throw new KeyStoreException("Error storing credential", e);
         } catch (IOException e) {
@@ -463,7 +478,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
             FileBasedTrustAnchor anchor = new FileBasedTrustAnchor(file.getName(), new TrustAnchor(
                     x509Cert, null));
             this.aliasObjectMap.put(alias, anchor);
-            this.certFilenameMap.put(x509Cert, alias);
+            this.trustedCertFilenameMap.put(x509Cert, alias);
         } catch (FileStoreException e) {
             throw new KeyStoreException(e);
         } catch (IOException e) {
-- 
1.6.3.2

