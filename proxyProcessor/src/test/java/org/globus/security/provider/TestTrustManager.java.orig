/*
 * Copyright 1999-2006 University of Chicago
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.globus.security.provider;

import java.security.KeyStore;
import java.security.cert.CertPathValidatorResult;
import java.security.cert.CertStore;
import java.security.cert.X509Certificate;
import java.util.Map;

import org.globus.security.X509ProxyCertPathParameters;
import org.globus.security.X509ProxyCertPathValidatorResult;

import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

/**
 * FILL ME
 * <p/>
 * // FIXME: separate this from proxy path validator test class.
 *
 * @author ranantha@mcs.anl.gov
 */
public class TestTrustManager extends TestProxyPathValidator {

    @BeforeClass
    public void setup() throws Exception {

        super.setup();
    }

    @Test
    public void validationTest() throws Exception {

        KeyStore keyStore = getKeyStore(new X509Certificate[]{goodCertsArr[0]});
        TestCertParameters parameters =
                new TestCertParameters(null, this.crls);

        CertStore certStore =
<<<<<<< HEAD:proxyProcessor/src/test/java/org/globus/security/provider/TestTrustManager.java
                CertStore.getInstance("MockCertStore", parameters);
=======
                CertStore.getInstance("TestCertStore", parameters);
>>>>>>> reformatting:proxyProcessor/src/test/java/org/globus/security/provider/TestTrustManager.java
        TestPolicyStore policyStore =
                new TestPolicyStore((Map) null);
        X509ProxyCertPathParameters validatorParam =
                new X509ProxyCertPathParameters(keyStore, certStore, policyStore,
                        false,
                        null);
        PKITrustManager manager =
                new PKITrustManager(
                        new MockProxyCertPathValidator(false, false, false),
                        validatorParam);
        X509Certificate[] certChain =
                new X509Certificate[]{goodCertsArr[5], goodCertsArr[1],
                        goodCertsArr[0]};
        manager.checkClientTrusted(certChain, "RSA");
        manager.checkServerTrusted(certChain, "RSA");
        CertPathValidatorResult result = manager.getValidationResult();
        assert (result != null);
        assert (result instanceof X509ProxyCertPathValidatorResult);
        assert (!((X509ProxyCertPathValidatorResult) result).isLimited());

        X509Certificate[] acceptedIssuers = manager.getAcceptedIssuers();
        assert (acceptedIssuers != null);
        assert (acceptedIssuers.length == 1);

        assert (acceptedIssuers[0].equals(goodCertsArr[0]));

        // FIXME: add a failure case

    }

}
