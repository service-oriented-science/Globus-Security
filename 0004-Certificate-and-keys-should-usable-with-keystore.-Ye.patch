From c844888b04ad11ca46ec7b04475856de528136f6 Mon Sep 17 00:00:00 2001
From: Rachana Ananthakrishnan <ranantha@mcs.anl.gov>
Date: Tue, 8 Dec 2009 16:22:57 -0600
Subject: [PATCH 4/8] Certificate and keys should usable with keystore. Yet to write tests.


Signed-off-by: Rachana Ananthakrishnan <ranantha@mcs.anl.gov>
---
 .../java/org/globus/security/X509Credential.java   |   14 +-
 .../filestore/FileBasedCertKeyCredential.java      |   11 +-
 .../security/filestore/FileBasedCredential.java    |   30 +++
 .../filestore/FileBasedProxyCredential.java        |   35 ++--
 .../filestore/FileBasedProxyCredentialStore.java   |   43 ----
 .../globus/security/filestore/FileBasedStore.java  |    4 +-
 .../security/filestore/FileBasedTrustAnchor.java   |    4 +-
 .../filestore/MultipleFileBasedObject.java         |    8 +-
 .../security/filestore/SingleFileBasedObject.java  |   12 +-
 .../security/provider/FileBasedKeyStore.java       |  209 +++++++++++---------
 .../provider/TestPEMFileBasedKeyStore.java         |   10 +-
 11 files changed, 201 insertions(+), 179 deletions(-)
 create mode 100644 ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCredential.java
 delete mode 100644 ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredentialStore.java

diff --git a/ssl-proxy/src/main/java/org/globus/security/X509Credential.java b/ssl-proxy/src/main/java/org/globus/security/X509Credential.java
index 12e78ff..d0ae8e1 100644
--- a/ssl-proxy/src/main/java/org/globus/security/X509Credential.java
+++ b/ssl-proxy/src/main/java/org/globus/security/X509Credential.java
@@ -71,14 +71,8 @@ public class X509Credential {
         this.opensslKey = new BouncyCastleOpenSSLKey(key_);
     }
 
-    public X509Credential(InputStream stream) throws CredentialException {
-
-        this(stream, stream);
-    }
-
     public X509Credential(InputStream certInputStream, InputStream keyInputStream)
             throws CredentialException {
-
         loadKey(keyInputStream);
         loadCertificate(certInputStream);
         validateCredential();
@@ -110,6 +104,10 @@ public class X509Credential {
 
     }
 
+    public boolean isEncryptedKey() {
+        return this.opensslKey.isEncrypted();
+    }
+
     protected void loadCertificate(InputStream input)
             throws CredentialException {
 
@@ -177,6 +175,10 @@ public class X509Credential {
 
     private void validateCredential() throws CredentialException {
 
+        if (this.certChain == null) {
+            throw new CredentialException("No certificates found");
+        }
+
         int size = this.certChain.length;
 
         if (size < 0) {
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java
index 9fdf282..ca0e3ea 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java
@@ -27,14 +27,19 @@ import org.globus.security.X509Credential;
  *
  * @author ranantha@mcs.anl.gov
  */
-public class FileBasedCertKeyCredential extends MultipleFileBasedObject<X509Credential> {
+public class FileBasedCertKeyCredential extends MultipleFileBasedObject<X509Credential> implements FileBasedCredential {
 
 
-    public FileBasedCertKeyCredential(String certFilename, String keyFilename) throws FileStoreException {
+    public FileBasedCertKeyCredential(File certFile, File keyFile) throws FileStoreException {
 
-        init(new File(certFilename), new File(keyFilename));
+        init(certFile, keyFile);
     }
 
+    public FileBasedCertKeyCredential(File certFile, File keyFile,
+                                      X509Credential credential) throws FileStoreException {
+
+        init(certFile, keyFile, credential);
+    }
 
     @Override
     protected X509Credential createObject(File certFilename, File keyFilename) throws FileStoreException {
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCredential.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCredential.java
new file mode 100644
index 0000000..6956a60
--- /dev/null
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCredential.java
@@ -0,0 +1,30 @@
+/*
+ * Copyright 1999-2006 University of Chicago
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.globus.security.filestore;
+
+import org.globus.security.X509Credential;
+
+/**
+ * FILL ME
+ *
+ * @author ranantha@mcs.anl.gov
+ */
+
+public interface FileBasedCredential {
+
+    public X509Credential getCredential() throws FileStoreException;
+
+}
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredential.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredential.java
index 3bf7645..5e26f26 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredential.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredential.java
@@ -31,18 +31,17 @@ import org.slf4j.LoggerFactory;
  *
  * @author ranantha@mcs.anl.gov
  */
-public class FileBasedProxyCredential extends SingleFileBasedObject<X509Credential> {
+public class FileBasedProxyCredential extends SingleFileBasedObject<X509Credential> implements FileBasedCredential {
 
     Logger logger = LoggerFactory.getLogger(FileBasedProxyCredential.class);
 
-    public FileBasedProxyCredential(File filename)
-            throws FileStoreException {
+    public FileBasedProxyCredential(File file) throws FileStoreException {
 
-        init(filename);
+        init(file);
     }
 
-    public FileBasedProxyCredential(String filename, X509Credential object) throws FileStoreException {
-        init(filename, object);
+    public FileBasedProxyCredential(File file, X509Credential object) throws FileStoreException {
+        init(file, object);
     }
 
     public X509Credential getCredential() throws FileStoreException {
@@ -50,31 +49,41 @@ public class FileBasedProxyCredential extends SingleFileBasedObject<X509Credenti
         return credential;
     }
 
-    protected X509Credential createObject(File filename) throws FileStoreException {
+    protected X509Credential createObject(File file) throws FileStoreException {
 
-        InputStream input = null;
+        InputStream keyInput = null;
+        InputStream certInput = null;
         try {
-            input = new FileInputStream(filename);
-            return new X509Credential(input);
+            keyInput = new FileInputStream(file);
+            certInput = new FileInputStream(file);
+            return new X509Credential(certInput, keyInput);
         } catch (FileNotFoundException e) {
             throw new FileStoreException(e);
         } catch (CredentialException e) {
             throw new FileStoreException(e);
         } finally {
 
-            if (input != null) {
+            if (keyInput != null) {
                 try {
-                    input.close();
+                    keyInput.close();
+                } catch (Exception e) {
+                    logger.warn("Unable to close stream.");
+                }
+            }
 
+            if (certInput != null) {
+                try {
+                    certInput.close();
                 } catch (Exception e) {
                     logger.warn("Unable to close stream.");
                 }
             }
+
         }
     }
 
     // no restrictions on proxy file name.
-    protected void validateFilename(File filename) throws FileStoreException {
+    protected void validateFilename(File file) throws FileStoreException {
 
     }
 }
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredentialStore.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredentialStore.java
deleted file mode 100644
index cd0ebe9..0000000
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredentialStore.java
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * Copyright 1999-2006 University of Chicago
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- * http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.globus.security.filestore;
-
-import java.io.File;
-import java.io.FilenameFilter;
-
-import org.globus.security.X509Credential;
-
-/**
- * FILL ME
- *
- * @author ranantha@mcs.anl.gov
- */
-public class FileBasedProxyCredentialStore extends AbstractFileBasedStore<X509Credential> {
-
-    @Override
-    protected FileBasedObject<X509Credential> create(String fileName) throws FileStoreException {
-        return new FileBasedProxyCredential(new File(fileName));
-    }
-
-    @Override
-    protected FilenameFilter getFilenameFilter() {
-        return new FilenameFilter() {
-            public boolean accept(File f, String s) {
-                return true;
-            }
-        };
-    }
-}
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedStore.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedStore.java
index ad32bfb..2f787fc 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedStore.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedStore.java
@@ -12,7 +12,7 @@ public abstract class FileBasedStore<T> {
 
     public static enum LoadFileType {
 
-        CA_FILE, CRL_FILE, PROXY_FILE //, PRIVATE_KEY
+        CA_FILE, CRL_FILE,
     }
 
     public static FileBasedStore getFileBasedStore(LoadFileType fileType) {
@@ -21,8 +21,6 @@ public abstract class FileBasedStore<T> {
                 return new FileBasedCACertStore();
             case CRL_FILE:
                 return new FileBasedCRLStore();
-            case PROXY_FILE:
-                return new FileBasedProxyCredentialStore();
             default:
                 return null;
         }
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedTrustAnchor.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedTrustAnchor.java
index eba22fe..08ecd0f 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedTrustAnchor.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedTrustAnchor.java
@@ -40,8 +40,8 @@ public class FileBasedTrustAnchor extends SingleFileBasedObject<TrustAnchor> {
 
     }
 
-    public FileBasedTrustAnchor(String fileName, TrustAnchor cachedAnchor) throws FileStoreException {
-        init(fileName, cachedAnchor);
+    public FileBasedTrustAnchor(File file, TrustAnchor cachedAnchor) throws FileStoreException {
+        init(file, cachedAnchor);
     }
 
     public void refresh() throws FileStoreException {
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/MultipleFileBasedObject.java b/ssl-proxy/src/main/java/org/globus/security/filestore/MultipleFileBasedObject.java
index 8fc5e91..fece8f3 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/MultipleFileBasedObject.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/MultipleFileBasedObject.java
@@ -39,15 +39,15 @@ public abstract class MultipleFileBasedObject<T> extends FileBasedObject<T> {
         this.keyLastModified = this.keyFile.lastModified();
     }
 
-    protected void init(String certFilename, String keyFilename, T object_) throws FileStoreException {
+    protected void init(File certFile_, File keyFile_, T object_) throws FileStoreException {
 
         if (object_ == null) {
             // FIXME: better exception?
             throw new IllegalArgumentException("Object cannot be null");
         }
         this.object = object_;
-        this.certFile = new File(certFilename);
-        this.keyFile = new File(keyFilename);
+        this.certFile = certFile_;
+        this.keyFile = keyFile_;
     }
 
 
@@ -74,7 +74,7 @@ public abstract class MultipleFileBasedObject<T> extends FileBasedObject<T> {
     }
 
     // for creation of object from a file
-    protected abstract T createObject(File certFilename, File keyFilename)
+    protected abstract T createObject(File certFile, File keyFile)
             throws FileStoreException;
 
 
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileBasedObject.java b/ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileBasedObject.java
index 1df1ffe..91dba24 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileBasedObject.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileBasedObject.java
@@ -33,21 +33,21 @@ public abstract class SingleFileBasedObject<T> extends FileBasedObject<T> {
     private long lastModified = -1;
     private File file = null;
 
-    protected void init(File filename) throws FileStoreException {
-        validateFilename(filename);
-        this.file = filename;
+    protected void init(File file_) throws FileStoreException {
+        validateFilename(file_);
+        this.file = file_;
         this.object = createObject(this.file);
         this.lastModified = this.file.lastModified();
     }
 
-    protected void init(String filename, T object_) throws FileStoreException {
-        validateFilename(new File(filename));
+    protected void init(File file_, T object_) throws FileStoreException {
+        validateFilename(file_);
         if (object_ == null) {
             // FIXME: better exception?
             throw new IllegalArgumentException("Object cannot be null");
         }
         this.object = object_;
-        this.file = new File(filename);
+        this.file = file_;
     }
 
     protected void reload() throws FileStoreException {
diff --git a/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java b/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java
index 6d4d795..adb62de 100644
--- a/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java
+++ b/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java
@@ -19,7 +19,6 @@ import java.security.cert.X509Certificate;
 import java.util.Collections;
 import java.util.Date;
 import java.util.Enumeration;
-import java.util.HashMap;
 import java.util.Hashtable;
 import java.util.Map;
 import java.util.Properties;
@@ -27,12 +26,15 @@ import java.util.Properties;
 import org.globus.security.CredentialException;
 import org.globus.security.X509Credential;
 import org.globus.security.filestore.FileBasedCertKeyCredential;
+import org.globus.security.filestore.FileBasedCredential;
 import org.globus.security.filestore.FileBasedKeyStoreParameters;
 import org.globus.security.filestore.FileBasedObject;
 import org.globus.security.filestore.FileBasedProxyCredential;
 import org.globus.security.filestore.FileBasedStore;
 import org.globus.security.filestore.FileBasedTrustAnchor;
 import org.globus.security.filestore.FileStoreException;
+import org.globus.security.filestore.MultipleFileBasedObject;
+import org.globus.security.filestore.SingleFileBasedObject;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -46,6 +48,7 @@ import static org.globus.security.util.CertificateIOUtil.writeCertificate;
  * certificates stored in PEM format. It reads trusted certificates from multiple directories and a proxy certificate
  * from a file.
  */
+// The FileBasedObject and FileBasedCredential classes need to be revisited. This code needs to be analyzed and improved.
 public class FileBasedKeyStore extends KeyStoreSpi {
 
     private static Logger logger =
@@ -67,32 +70,17 @@ public class FileBasedKeyStore extends KeyStoreSpi {
     private Map<String, FileBasedObject> aliasObjectMap =
             new Hashtable<String, FileBasedObject>();
 
-
-    // FIXME: I don't see the need for these two objects. In all usages of this, the FileBasedObject is obtained
-    // from the aliasObjectMap. The only piece I would change is to have an indication of what kind of entry this is.
-    // KeyStore.KeyEntry. SO single map of alias->{FileBasedObjct and KeyEntry}. For efficiency, a separate maps for keys
-    // and trusted certs are acceptable
-    // Map from trusted certificate to filename
-    private Map<Certificate, String> trustedCertFilenameMap =
-            new HashMap<Certificate, String>();
-    // Map from proxy certificate to filename
-    private Map<X509Credential, String> certKeyFilenameMap =
-            new HashMap<X509Credential, String>();
-
     // default directory for trusted certificates
     private File defaultDirectory;
     private FileBasedStore caDelegate =
             FileBasedStore.getFileBasedStore(LoadFileType.CA_FILE);
-    private FileBasedStore proxyDelegate =
-            FileBasedStore.getFileBasedStore(LoadFileType.PROXY_FILE);
 
-
-    private FileBasedProxyCredential getKeyEntry(String alias) {
+    private FileBasedCredential getKeyEntry(String alias) {
 
         FileBasedObject object = this.aliasObjectMap.get(alias);
-        if ((object != null) &&
-                (object instanceof FileBasedProxyCredential)) {
-            return (FileBasedProxyCredential) object;
+        if ((object != null) && (object instanceof FileBasedCredential)) {
+
+            return (FileBasedCredential) object;
         }
         return null;
     }
@@ -112,7 +100,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
     public Key engineGetKey(String s, char[] chars)
             throws NoSuchAlgorithmException, UnrecoverableKeyException {
 
-        FileBasedProxyCredential credential = getKeyEntry(s);
+        FileBasedCredential credential = getKeyEntry(s);
         Key key = null;
         if (credential != null) {
             try {
@@ -140,27 +128,28 @@ public class FileBasedKeyStore extends KeyStoreSpi {
             IOException,
             NoSuchAlgorithmException,
             CertificateException {
+
         for (FileBasedObject object : this.aliasObjectMap.values()) {
             try {
                 if (object instanceof FileBasedTrustAnchor) {
                     File file = ((FileBasedTrustAnchor) object).getFile();
                     FileBasedTrustAnchor desc = (FileBasedTrustAnchor) object;
                     if (file == null) {
-                        String filename = this.trustedCertFilenameMap.get(desc.getTrustAnchor().getTrustedCert());
-                        file = new File(this.defaultDirectory, filename + ".0");
+                        // FIXME:
+                        //String filename = this.trustedCertFilenameMap.get(desc.getTrustAnchor().getTrustedCert());
+                        //file = new File(this.defaultDirectory, filename + ".0");
                     }
                     writeCertificate(desc.getTrustAnchor().getTrustedCert(), file);
                 } else if (object instanceof FileBasedProxyCredential) {
-                    File file = ((FileBasedProxyCredential) object).getFile();
                     FileBasedProxyCredential proxy = (FileBasedProxyCredential) object;
+                    File file = proxy.getFile();
                     X509Credential credential = proxy.getCredential();
                     if (file == null) {
-                        String filename = this.certKeyFilenameMap.get(credential);
-                        file = new File(this.defaultDirectory, filename + ".pem");
+                        // String filename = this.certKeyFilenameMap.get(credential);
+                        //file = new File(this.defaultDirectory, filename + ".pem");
                     }
                     credential.writeToFile(file);
                 }
-                // FIXME: add cert and key
             } catch (FileStoreException e) {
                 throw new CertificateException(e);
             }
@@ -175,7 +164,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
                 return trustAnchor.getTrustAnchor().
                         getTrustedCert().getNotBefore();
             } else {
-                FileBasedProxyCredential credential = getKeyEntry(s);
+                FileBasedCredential credential = getKeyEntry(s);
                 if (credential != null) {
                     return credential.getCredential().getNotBefore();
                 }
@@ -188,12 +177,15 @@ public class FileBasedKeyStore extends KeyStoreSpi {
 
     @Override
     public String engineGetCertificateAlias(Certificate certificate) {
-        return this.trustedCertFilenameMap.get(certificate);
+
+        // FIXME,
+        return null;
     }
 
     @Override
     public Certificate[] engineGetCertificateChain(String s) {
-        FileBasedProxyCredential credential = getKeyEntry(s);
+
+        FileBasedCredential credential = getKeyEntry(s);
         X509Certificate[] chain = null;
         if (credential != null) {
             try {
@@ -208,6 +200,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
 
     @Override
     public Certificate engineGetCertificate(String s) {
+
         FileBasedTrustAnchor trustAnchor = getCertificateEntry(s);
         if (trustAnchor != null) {
             try {
@@ -222,6 +215,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
     @Override
     public void engineLoad(KeyStore.LoadStoreParameter loadStoreParameter)
             throws IOException, NoSuchAlgorithmException, CertificateException {
+
         if (!(loadStoreParameter instanceof FileBasedKeyStoreParameters)) {
             throw new IllegalArgumentException(
                     "Unable to process parameters: " + loadStoreParameter);
@@ -229,14 +223,30 @@ public class FileBasedKeyStore extends KeyStoreSpi {
         FileBasedKeyStoreParameters params =
                 (FileBasedKeyStoreParameters) loadStoreParameter;
         try {
-            loadDirectories(params.getCertDirs());
-            loadDirectories(new String[]{params.getDefaultCertDir()});
-            // load proxy certificate, if configured
-            loadProxyCertificate(params.getProxyFilename());
 
+            // load trusted CAs, if configured
+            String[] certs = params.getCertDirs();
+            if (certs != null) {
+                loadDirectories(certs);
+            }
+
+            // load trusted CAs from default location
+            String defaultCert = params.getDefaultCertDir();
+            if (defaultCert != null) {
+                loadDirectories(new String[]{defaultCert});
+            }
+
+            // load proxy certificate, if configured
+            String proxy = params.getProxyFilename();
+            if (proxy != null) {
+                loadProxyCertificate(proxy);
+            }
             // load usercert/key, if configured
-            loadCertificateKey(params.getUserCertFilename(),
-                    params.getUserKeyFilename());
+            String userCert = params.getUserCertFilename();
+            String userKey = params.getUserKeyFilename();
+            if ((userCert != null) && (userKey != null)) {
+                loadCertificateKey(userCert, userKey);
+            }
 
         } catch (FileStoreException e) {
             throw new CertificateException(e);
@@ -246,6 +256,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
     @Override
     public void engineLoad(InputStream inputStream, char[] chars)
             throws IOException, NoSuchAlgorithmException, CertificateException {
+
         try {
             Properties properties = new Properties();
             properties.load(inputStream);
@@ -262,11 +273,12 @@ public class FileBasedKeyStore extends KeyStoreSpi {
                         throw new IOException(
                                 "Unable to create default certificate directory");
                     }
-                }
-                try {
-                    loadDirectories(new String[]{defaultDirectoryString});
-                } catch (FileStoreException e) {
-                    throw new CertificateException(e);
+                } else {
+                    try {
+                        loadDirectories(new String[]{defaultDirectoryString});
+                    } catch (FileStoreException e) {
+                        throw new CertificateException(e);
+                    }
                 }
             }
             String directoryListString =
@@ -301,7 +313,6 @@ public class FileBasedKeyStore extends KeyStoreSpi {
                 logger.info("Error closing inputStream", e);
             }
         }
-
     }
 
     private void loadProxyCertificate(String proxyFilename) throws FileStoreException {
@@ -310,14 +321,8 @@ public class FileBasedKeyStore extends KeyStoreSpi {
             return;
         }
 
-        proxyDelegate.loadWrappers(new String[]{proxyFilename});
-        Map<String, FileBasedProxyCredential> wrapperMap =
-                proxyDelegate.getWrapperMap();
-        for (FileBasedProxyCredential credential : wrapperMap.values()) {
-            this.aliasObjectMap.put(proxyFilename, credential);
-            this.certKeyFilenameMap.put(credential.getCredential(), proxyFilename);
-        }
-
+        FileBasedProxyCredential credential = new FileBasedProxyCredential(new File(proxyFilename));
+        this.aliasObjectMap.put(proxyFilename, credential);
     }
 
 
@@ -329,12 +334,12 @@ public class FileBasedKeyStore extends KeyStoreSpi {
             return;
         }
 
-        // FIXME: for proxy and this, a delegate that looks at multiple locations doesn't make sense.
-        FileBasedCertKeyCredential credential = new FileBasedCertKeyCredential(userCertFilename, userKeyFilename);
+        // Relative to what?
+        FileBasedCertKeyCredential credential = new FileBasedCertKeyCredential(new File(userCertFilename),
+                new File(userKeyFilename));
         // What do we name this alias?
         String alias = userCertFilename + ":" + userKeyFilename;
         this.aliasObjectMap.put(alias, credential);
-        this.certKeyFilenameMap.put(credential.getCredential(), )
 
         // FIXME: Here the credential needs to be loaded and added to the Map.
     }
@@ -348,9 +353,6 @@ public class FileBasedKeyStore extends KeyStoreSpi {
         for (FileBasedTrustAnchor trustAnchor : wrapperMap
                 .values()) {
             String alias = trustAnchor.getFile().getName();
-            trustedCertFilenameMap
-                    .put(trustAnchor.getTrustAnchor().getTrustedCert(),
-                            alias);
             this.aliasObjectMap.put(alias, trustAnchor);
         }
     }
@@ -363,35 +365,36 @@ public class FileBasedKeyStore extends KeyStoreSpi {
             if (object instanceof FileBasedTrustAnchor) {
 
                 FileBasedTrustAnchor descriptor = (FileBasedTrustAnchor) object;
-                Certificate cert;
-                try {
-                    cert = descriptor.getTrustAnchor().getTrustedCert();
-                } catch (FileStoreException e) {
-                    throw new KeyStoreException(e);
-                }
-                this.trustedCertFilenameMap.remove(cert);
                 boolean success = descriptor.getFile().delete();
                 if (!success) {
                     // FIXME: warn? throw error?
                     logger.info("Unable to delete certificate");
                 }
-            } else if (object instanceof FileBasedProxyCredential) {
-
-                FileBasedProxyCredential proxy = (FileBasedProxyCredential) object;
-                X509Credential credential;
-                try {
-                    credential = proxy.getCredential();
-                } catch (FileStoreException e) {
-                    throw new KeyStoreException(e);
-                }
-                this.certKeyFilenameMap.remove(credential);
-                boolean success = proxy.getFile().delete();
-                if (!success) {
-                    // FIXME: warn? throw error?
-                    logger.info("Unable to delete credential");
+            } else if (object instanceof FileBasedCredential) {
+
+                FileBasedCredential proxy = (FileBasedCredential) object;
+                if (proxy instanceof SingleFileBasedObject) {
+                    File file = ((SingleFileBasedObject) proxy).getFile();
+                    boolean success = file.delete();
+                    if (!success) {
+                        // FIXME: warn? throw error?
+                        logger.info("Unable to delete credential");
+                    }
+                } else if (proxy instanceof MultipleFileBasedObject) {
+                    File certFile = ((MultipleFileBasedObject) proxy).getCertificateFile();
+                    boolean success = certFile.delete();
+                    if (!success) {
+                        // FIXME: warn? throw error?
+                        logger.info("Unable to delete credential");
+                    }
+                    File keyFile = ((MultipleFileBasedObject) proxy).getKeyFile();
+                    success = keyFile.delete();
+                    if (!success) {
+                        // FIXME: warn? throw error?
+                        logger.info("Unable to delete credential");
+                    }
                 }
             }
-            // FIXME: add cert and key
         }
     }
 
@@ -413,20 +416,39 @@ public class FileBasedKeyStore extends KeyStoreSpi {
             throw new KeyStoreException("Certificate chain of X509Certificate expected");
         }
         X509Credential credential = new X509Credential((PrivateKey) key, (X509Certificate[]) certificates);
-
-        File file = null;
-        FileBasedProxyCredential proxyCredential = getKeyEntry(s);
-        if (proxyCredential != null) {
-            file = proxyCredential.getFile();
-        } else {
-            // FIXME: should alias be file name? or generate?
-            file = new File(s + "-key.pem");
-        }
         try {
-            credential.writeToFile(file);
-            FileBasedProxyCredential fileCred = new FileBasedProxyCredential(file.getName(), credential);
-            this.aliasObjectMap.put(s, fileCred);
-            this.certKeyFilenameMap.put(credential, s);
+            FileBasedCredential entry = getKeyEntry(s);
+            if (entry != null) {
+                if (entry instanceof FileBasedProxyCredential) {
+                    FileBasedProxyCredential proxy = (FileBasedProxyCredential) entry;
+                    File file = proxy.getFile();
+                    credential.writeToFile(file);
+                    proxy = new FileBasedProxyCredential(file, credential);
+                    this.aliasObjectMap.put(s, proxy);
+                } else if (entry instanceof FileBasedCertKeyCredential) {
+                    FileBasedCertKeyCredential certKey = (FileBasedCertKeyCredential) entry;
+                    File certFile = certKey.getCertificateFile();
+                    File keyFile = certKey.getKeyFile();
+                    credential.writeToFile(certFile, keyFile);
+                    certKey = new FileBasedCertKeyCredential(certFile, keyFile, credential);
+                    this.aliasObjectMap.put(s, certKey);
+                }
+            } else {
+                if (credential.isEncryptedKey()) {
+                    // FIXME: relative to what?
+                    File certFile = new File(s + "-cert.pem");
+                    File keyFile = new File(s + "-key.pem");
+                    credential.writeToFile(certFile, keyFile);
+                    FileBasedCertKeyCredential fileCertKey =
+                            new FileBasedCertKeyCredential(certFile, keyFile, credential);
+                    this.aliasObjectMap.put(s, fileCertKey);
+                } else {
+                    File file = new File(s + "-certkey.pem");
+                    credential.writeToFile(file);
+                    FileBasedProxyCredential fileProxy = new FileBasedProxyCredential(file, credential);
+                    this.aliasObjectMap.put(s, fileProxy);
+                }
+            }
         } catch (FileStoreException e) {
             throw new KeyStoreException("Error storing credential", e);
         } catch (IOException e) {
@@ -475,10 +497,8 @@ public class FileBasedKeyStore extends KeyStoreSpi {
         X509Certificate x509Cert = (X509Certificate) certificate;
         try {
             writeCertificate(x509Cert, file);
-            FileBasedTrustAnchor anchor = new FileBasedTrustAnchor(file.getName(), new TrustAnchor(
-                    x509Cert, null));
+            FileBasedTrustAnchor anchor = new FileBasedTrustAnchor(file, new TrustAnchor(x509Cert, null));
             this.aliasObjectMap.put(alias, anchor);
-            this.trustedCertFilenameMap.put(x509Cert, alias);
         } catch (FileStoreException e) {
             throw new KeyStoreException(e);
         } catch (IOException e) {
@@ -487,5 +507,4 @@ public class FileBasedKeyStore extends KeyStoreSpi {
             throw new KeyStoreException(e);
         }
     }
-
 }
diff --git a/ssl-proxy/src/test/java/org/globus/security/provider/TestPEMFileBasedKeyStore.java b/ssl-proxy/src/test/java/org/globus/security/provider/TestPEMFileBasedKeyStore.java
index 4f0e34a..f281e0a 100644
--- a/ssl-proxy/src/test/java/org/globus/security/provider/TestPEMFileBasedKeyStore.java
+++ b/ssl-proxy/src/test/java/org/globus/security/provider/TestPEMFileBasedKeyStore.java
@@ -107,17 +107,19 @@ public class TestPEMFileBasedKeyStore {
         }
 
 
-        String proxyFilename1 = "validatorTest/gsi2fullproxy.pem";
+        String proxyFilename1 = "validatorTest/gsi3independentFromLimitedProxy.pem";
         this.proxyFile1 = new FileSetupUtil(proxyFilename1);
         this.proxyFile1.copyFileToTemp();
         this.proxyCertificates.put(this.proxyFile1,
-                new X509Credential(loader.getResourceAsStream(proxyFilename1)));
+                new X509Credential(loader.getResourceAsStream(proxyFilename1),
+                        loader.getResourceAsStream(proxyFilename1)));
 
-        String proxyFilename2 = "validatorTest/gsi2limitedproxy.pem";
+        String proxyFilename2 = "validatorTest/gsi3FromPathOneProxy.pem";
         this.proxyFile2 = new FileSetupUtil(proxyFilename2);
         this.proxyFile2.copyFileToTemp();
         this.proxyCertificates.put(this.proxyFile2,
-                new X509Credential(loader.getResourceAsStream(proxyFilename2)));
+                new X509Credential(loader.getResourceAsStream(proxyFilename2),
+                        loader.getResourceAsStream(proxyFilename2)));
 
         Security.addProvider(new GlobusProvider());
     }
-- 
1.6.3.2

