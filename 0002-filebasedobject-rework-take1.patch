From 4591675deb4d229938ad2efe663a20715db9fa92 Mon Sep 17 00:00:00 2001
From: Rachana Ananthakrishnan <ranantha@mcs.anl.gov>
Date: Wed, 2 Dec 2009 14:32:24 -0600
Subject: [PATCH 2/8] filebasedobject rework take1


Signed-off-by: Rachana Ananthakrishnan <ranantha@mcs.anl.gov>
---
 .../globus/security/filestore/FileBasedCRL.java    |    2 +-
 .../filestore/FileBasedCertKeyCredential.java      |   54 +++++++++++++
 .../globus/security/filestore/FileBasedObject.java |   53 +------------
 .../filestore/FileBasedProxyCredential.java        |    2 +-
 .../security/filestore/FileBasedSigningPolicy.java |    2 +-
 .../security/filestore/FileBasedTrustAnchor.java   |    2 +-
 .../security/filestore/FileObjectParameters.java   |   27 +++++++
 .../filestore/MultipleFileBasedObject.java         |   81 ++++++++++++++++++++
 .../security/filestore/SingleFileBasedObject.java  |   75 ++++++++++++++++++
 .../security/filestore/SingleFileParameter.java    |   39 ++++++++++
 .../filestore/X509CredentialParameter.java         |   59 ++++++++++++++
 .../security/provider/FileBasedKeyStore.java       |   39 +++++-----
 .../security/util/TestSigningPolicyFileParser.java |    5 +-
 13 files changed, 363 insertions(+), 77 deletions(-)
 create mode 100644 ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java
 create mode 100644 ssl-proxy/src/main/java/org/globus/security/filestore/FileObjectParameters.java
 create mode 100644 ssl-proxy/src/main/java/org/globus/security/filestore/MultipleFileBasedObject.java
 create mode 100644 ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileBasedObject.java
 create mode 100644 ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileParameter.java
 create mode 100644 ssl-proxy/src/main/java/org/globus/security/filestore/X509CredentialParameter.java

diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCRL.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCRL.java
index ccef021..f5b7049 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCRL.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCRL.java
@@ -29,7 +29,7 @@ import org.globus.security.util.CertificateLoadUtil;
  *
  * @author ranantha@mcs.anl.gov
  */
-public class FileBasedCRL extends FileBasedObject<X509CRL> {
+public class FileBasedCRL extends SingleFileBasedObject<X509CRL> {
 
     private static CrlFilter filter = new CrlFilter();
 
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java
new file mode 100644
index 0000000..bed85c1
--- /dev/null
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedCertKeyCredential.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright 1999-2006 University of Chicago
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.globus.security.filestore;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+
+import org.globus.security.CredentialException;
+import org.globus.security.X509Credential;
+
+/**
+ * FILL ME
+ *
+ * @author ranantha@mcs.anl.gov
+ */
+public class FileBasedCertKeyCredential extends MultipleFileBasedObject<X509Credential> {
+
+
+    public FileBasedCertKeyCredential(String certFilename, String keyFilename) throws FileStoreException {
+
+        init(new File(certFilename), new File(keyFilename));
+    }
+
+
+    @Override
+    protected X509Credential createObject(File certFilename, File keyFilename) throws FileStoreException {
+        FileInputStream certIns;
+        FileInputStream keyIns;
+        try {
+            certIns = new FileInputStream(certFilename);
+            keyIns = new FileInputStream(keyFilename);
+            X509Credential credential = new X509Credential(certIns, keyIns);
+            return credential;
+        } catch (FileNotFoundException e) {
+            throw new FileStoreException(e);
+        } catch (CredentialException e) {
+            throw new FileStoreException(e);
+        }
+    }
+}
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedObject.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedObject.java
index f99f90c..ad87139 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedObject.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedObject.java
@@ -15,11 +15,6 @@
  */
 package org.globus.security.filestore;
 
-import java.io.File;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 /**
  * FILL ME
  *
@@ -27,30 +22,8 @@ import org.slf4j.LoggerFactory;
  */
 public abstract class FileBasedObject<T> {
 
-    private static Logger logger =
-            LoggerFactory.getLogger(FileBasedObject.class.getName());
-
-    private T object = null;
-    private long lastModified = -1;
-    private File file = null;
-    private boolean changed = false;
-
-    protected void init(File filename) throws FileStoreException {
-        validateFilename(filename);
-        this.file = filename;
-        this.object = createObject(this.file);
-        this.lastModified = this.file.lastModified();
-    }
-
-    protected void init(String filename, T object_) throws FileStoreException {
-        validateFilename(new File(filename));
-        if (object_ == null) {
-            // FIXME: better exception?
-            throw new IllegalArgumentException("Object cannot be null");
-        }
-        this.object = object_;
-        this.file = new File(filename);
-    }
+    protected T object = null;
+    protected boolean changed = false;
 
     protected T getObject() throws FileStoreException {
 
@@ -62,26 +35,6 @@ public abstract class FileBasedObject<T> {
         return this.changed;
     }
 
-    protected void reload() throws FileStoreException {
-
-        this.changed = false;
-        long latestLastModified = this.file.lastModified();
-        if (this.lastModified < latestLastModified) {
-            this.object = createObject(this.file);
-            this.lastModified = latestLastModified;
-            this.changed = true;
-        }
-    }
-
-    public File getFile() {
-        return this.file;
-    }
-
-    // for creation of file from a file
-    protected abstract T createObject(File filename)
-            throws FileStoreException;
+    protected abstract void reload() throws FileStoreException;
 
-    // for filename validation
-    protected abstract void validateFilename(File filename)
-            throws FileStoreException;
 }
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredential.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredential.java
index 7cf2fdd..3bf7645 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredential.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedProxyCredential.java
@@ -31,7 +31,7 @@ import org.slf4j.LoggerFactory;
  *
  * @author ranantha@mcs.anl.gov
  */
-public class FileBasedProxyCredential extends FileBasedObject<X509Credential> {
+public class FileBasedProxyCredential extends SingleFileBasedObject<X509Credential> {
 
     Logger logger = LoggerFactory.getLogger(FileBasedProxyCredential.class);
 
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedSigningPolicy.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedSigningPolicy.java
index a40ce28..7376333 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedSigningPolicy.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedSigningPolicy.java
@@ -34,7 +34,7 @@ import org.globus.security.util.SigningPolicyFileParser;
  *
  * @author ranantha@mcs.anl.gov
  */
-public class FileBasedSigningPolicy extends FileBasedObject<Map<X500Principal, SigningPolicy>> {
+public class FileBasedSigningPolicy extends SingleFileBasedObject<Map<X500Principal, SigningPolicy>> {
 
 
     public final static String SIGNING_POLICY_FILE_SUFFIX = ".signing_policy";
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedTrustAnchor.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedTrustAnchor.java
index f9f1676..eba22fe 100644
--- a/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedTrustAnchor.java
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileBasedTrustAnchor.java
@@ -31,7 +31,7 @@ import org.globus.security.util.CertificateLoadUtil;
  *
  * @author ranantha@mcs.anl.gov
  */
-public class FileBasedTrustAnchor extends FileBasedObject<TrustAnchor> {
+public class FileBasedTrustAnchor extends SingleFileBasedObject<TrustAnchor> {
 
     private static TrustAnchorFilter filter = new TrustAnchorFilter();
 
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/FileObjectParameters.java b/ssl-proxy/src/main/java/org/globus/security/filestore/FileObjectParameters.java
new file mode 100644
index 0000000..31a9ebe
--- /dev/null
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/FileObjectParameters.java
@@ -0,0 +1,27 @@
+/*
+ * Copyright 1999-2006 University of Chicago
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.globus.security.filestore;
+
+/**
+ * FILL ME
+ * <p/>
+ * Marker interface
+ *
+ * @author ranantha@mcs.anl.gov
+ */
+public interface FileObjectParameters {
+
+}
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/MultipleFileBasedObject.java b/ssl-proxy/src/main/java/org/globus/security/filestore/MultipleFileBasedObject.java
new file mode 100644
index 0000000..8fc5e91
--- /dev/null
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/MultipleFileBasedObject.java
@@ -0,0 +1,81 @@
+/*
+ * Copyright 1999-2006 University of Chicago
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.globus.security.filestore;
+
+import java.io.File;
+
+/**
+ * FILL ME
+ *
+ * @author ranantha@mcs.anl.gov
+ */
+public abstract class MultipleFileBasedObject<T> extends FileBasedObject<T> {
+
+    private long certLastModified = -1;
+    private long keyLastModified = -1;
+    private File certFile = null;
+    private File keyFile = null;
+
+
+    protected void init(File certFile_, File keyFile_) throws FileStoreException {
+        // FIXME: null checks
+        this.certFile = certFile_;
+        this.keyFile = keyFile_;
+        this.object = createObject(this.certFile, this.keyFile);
+        this.certLastModified = this.certFile.lastModified();
+        this.keyLastModified = this.keyFile.lastModified();
+    }
+
+    protected void init(String certFilename, String keyFilename, T object_) throws FileStoreException {
+
+        if (object_ == null) {
+            // FIXME: better exception?
+            throw new IllegalArgumentException("Object cannot be null");
+        }
+        this.object = object_;
+        this.certFile = new File(certFilename);
+        this.keyFile = new File(keyFilename);
+    }
+
+
+    protected void reload() throws FileStoreException {
+
+        this.changed = false;
+        long cLatestLastModified = this.certFile.lastModified();
+        long kLatestLastModified = this.keyFile.lastModified();
+        if ((this.certLastModified < cLatestLastModified) ||
+                (this.keyLastModified < kLatestLastModified)) {
+            this.object = createObject(this.certFile, this.keyFile);
+            this.certLastModified = cLatestLastModified;
+            this.keyLastModified = kLatestLastModified;
+            this.changed = true;
+        }
+    }
+
+    public File getCertificateFile() {
+        return this.certFile;
+    }
+
+    public File getKeyFile() {
+        return this.keyFile;
+    }
+
+    // for creation of object from a file
+    protected abstract T createObject(File certFilename, File keyFilename)
+            throws FileStoreException;
+
+
+}
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileBasedObject.java b/ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileBasedObject.java
new file mode 100644
index 0000000..1df1ffe
--- /dev/null
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileBasedObject.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright 1999-2006 University of Chicago
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.globus.security.filestore;
+
+import java.io.File;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * FILL ME
+ *
+ * @author ranantha@mcs.anl.gov
+ */
+public abstract class SingleFileBasedObject<T> extends FileBasedObject<T> {
+
+    private static Logger logger =
+            LoggerFactory.getLogger(SingleFileBasedObject.class.getName());
+
+    private long lastModified = -1;
+    private File file = null;
+
+    protected void init(File filename) throws FileStoreException {
+        validateFilename(filename);
+        this.file = filename;
+        this.object = createObject(this.file);
+        this.lastModified = this.file.lastModified();
+    }
+
+    protected void init(String filename, T object_) throws FileStoreException {
+        validateFilename(new File(filename));
+        if (object_ == null) {
+            // FIXME: better exception?
+            throw new IllegalArgumentException("Object cannot be null");
+        }
+        this.object = object_;
+        this.file = new File(filename);
+    }
+
+    protected void reload() throws FileStoreException {
+
+        this.changed = false;
+        long latestLastModified = this.file.lastModified();
+        if (this.lastModified < latestLastModified) {
+            this.object = createObject(this.file);
+            this.lastModified = latestLastModified;
+            this.changed = true;
+        }
+    }
+
+    public File getFile() {
+        return this.file;
+    }
+
+    // for creation of object from a file
+    protected abstract T createObject(File filename)
+            throws FileStoreException;
+
+    // for filename validation
+    protected abstract void validateFilename(File filename)
+            throws FileStoreException;
+}
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileParameter.java b/ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileParameter.java
new file mode 100644
index 0000000..5ccb93d
--- /dev/null
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/SingleFileParameter.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright 1999-2006 University of Chicago
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.globus.security.filestore;
+
+/**
+ * FILL ME
+ *
+ * @author ranantha@mcs.anl.gov
+ */
+public class SingleFileParameter implements FileObjectParameters {
+
+    String filename;
+
+    public SingleFileParameter(String filename_) {
+
+        if (filename_ == null) {
+            throw new IllegalArgumentException();
+        }
+
+        this.filename = filename_;
+    }
+
+    public String getFilename() {
+        return this.filename;
+    }
+}
diff --git a/ssl-proxy/src/main/java/org/globus/security/filestore/X509CredentialParameter.java b/ssl-proxy/src/main/java/org/globus/security/filestore/X509CredentialParameter.java
new file mode 100644
index 0000000..c0b7638
--- /dev/null
+++ b/ssl-proxy/src/main/java/org/globus/security/filestore/X509CredentialParameter.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright 1999-2006 University of Chicago
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.globus.security.filestore;
+
+/**
+ * FILL ME
+ *
+ * @author ranantha@mcs.anl.gov
+ */
+public class X509CredentialParameter {
+
+    String certKeyFilename;
+    String certificateFilename;
+    String keyFilename;
+
+    public X509CredentialParameter(String certKeyFilename_) {
+
+        if (certKeyFilename_ == null) {
+            throw new IllegalArgumentException();
+        }
+
+        this.certKeyFilename = certKeyFilename_;
+    }
+
+    public X509CredentialParameter(String certificateFilename_, String keyFilename_) {
+
+        if ((certificateFilename_ == null) || (keyFilename_ == null)) {
+            throw new IllegalArgumentException();
+        }
+
+        this.certificateFilename = certificateFilename_;
+        this.keyFilename = keyFilename_;
+    }
+
+    public String getCertKeyFilename() {
+        return this.certKeyFilename;
+    }
+
+    public String getCertificateFilename() {
+        return this.certificateFilename;
+    }
+
+    public String getKeyFilename() {
+        return this.keyFilename;
+    }
+}
diff --git a/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java b/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java
index ea08e92..a9fdff6 100644
--- a/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java
+++ b/ssl-proxy/src/main/java/org/globus/security/provider/FileBasedKeyStore.java
@@ -27,11 +27,11 @@ import java.util.Properties;
 import org.globus.security.CredentialException;
 import org.globus.security.X509Credential;
 import org.globus.security.filestore.FileBasedKeyStoreParameters;
-import org.globus.security.filestore.FileBasedObject;
 import org.globus.security.filestore.FileBasedProxyCredential;
 import org.globus.security.filestore.FileBasedStore;
 import org.globus.security.filestore.FileBasedTrustAnchor;
 import org.globus.security.filestore.FileStoreException;
+import org.globus.security.filestore.SingleFileBasedObject;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -63,8 +63,8 @@ public class FileBasedKeyStore extends KeyStoreSpi {
     public static final String PROXY_FILENAME = "proxyFilename";
 
     // Map from alias to the object (either key or certificate)
-    private Map<String, FileBasedObject> aliasObjectMap =
-            new Hashtable<String, FileBasedObject>();
+    private Map<String, SingleFileBasedObject> aliasObjectMap =
+            new Hashtable<String, SingleFileBasedObject>();
     // Map from trusted certificate to filename
     private Map<Certificate, String> certFilenameMap =
             new HashMap<Certificate, String>();
@@ -82,7 +82,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
 
     private FileBasedProxyCredential getKeyEntry(String alias) {
 
-        FileBasedObject object = this.aliasObjectMap.get(alias);
+        SingleFileBasedObject object = this.aliasObjectMap.get(alias);
         if ((object != null) &&
                 (object instanceof FileBasedProxyCredential)) {
             return (FileBasedProxyCredential) object;
@@ -93,7 +93,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
 
     private FileBasedTrustAnchor getCertificateEntry(String alias) {
 
-        FileBasedObject object = this.aliasObjectMap.get(alias);
+        SingleFileBasedObject object = this.aliasObjectMap.get(alias);
         if ((object != null) &&
                 (object instanceof FileBasedTrustAnchor)) {
             return (FileBasedTrustAnchor) object;
@@ -109,9 +109,15 @@ public class FileBasedKeyStore extends KeyStoreSpi {
         Key key = null;
         if (credential != null) {
             try {
-                key = credential.getCredential().getPrivateKey();
+                String password = null;
+                if (chars != null) {
+                    password = new String(chars);
+                }
+                key = credential.getCredential().getPrivateKey(password);
             } catch (FileStoreException e) {
                 throw new UnrecoverableKeyException(e.getMessage());
+            } catch (CredentialException e) {
+                throw new UnrecoverableKeyException(e.getMessage());
             }
         }
         return key;
@@ -127,7 +133,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
             IOException,
             NoSuchAlgorithmException,
             CertificateException {
-        for (FileBasedObject object : this.aliasObjectMap.values()) {
+        for (SingleFileBasedObject object : this.aliasObjectMap.values()) {
             File file = object.getFile();
             try {
                 if (object instanceof FileBasedTrustAnchor) {
@@ -221,8 +227,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
 
             // load usercert/key, if configured
             loadCertificateKey(params.getUserCertFilename(),
-                    params.getUserKeyFilename(),
-                    params.getProtectionParameter());
+                    params.getUserKeyFilename());
 
         } catch (FileStoreException e) {
             throw new CertificateException(e);
@@ -277,8 +282,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
                 String keyFilename = properties.getProperty(KEY_FILENAME);
                 if ((certFilename != null) &&
                         (keyFilename != null)) {
-                    loadCertificateKey(certFilename, keyFilename,
-                            new KeyStore.PasswordProtection(chars));
+                    loadCertificateKey(certFilename, keyFilename);
                 }
             } catch (FileStoreException e) {
                 throw new CertificateException(e);
@@ -311,21 +315,14 @@ public class FileBasedKeyStore extends KeyStoreSpi {
     }
 
 
-    private void loadCertificateKey(String userCertFilename, String userKeyFilename,
-                                    KeyStore.ProtectionParameter protectionParameter)
+    private void loadCertificateKey(String userCertFilename, String userKeyFilename)
             throws CredentialException {
 
         if ((userCertFilename == null) ||
                 (userKeyFilename == null)) {
             return;
         }
-
-        String password = null;
-        if (protectionParameter instanceof KeyStore.PasswordProtection) {
-            password = new String(((KeyStore.PasswordProtection) protectionParameter).getPassword());
-        }
-        // FIXME: decrytps it. probably should not?
-        X509Credential credential = new X509Credential(userKeyFilename, userCertFilename, password);
+        // FIXME: Here the credential needs to be loaded and added to the Map.
     }
 
 
@@ -347,7 +344,7 @@ public class FileBasedKeyStore extends KeyStoreSpi {
     @Override
     public void engineDeleteEntry(String s) throws KeyStoreException {
 
-        FileBasedObject object = this.aliasObjectMap.remove(s);
+        SingleFileBasedObject object = this.aliasObjectMap.remove(s);
         if (object != null) {
             if (object instanceof FileBasedTrustAnchor) {
 
diff --git a/ssl-proxy/src/test/java/org/globus/security/util/TestSigningPolicyFileParser.java b/ssl-proxy/src/test/java/org/globus/security/util/TestSigningPolicyFileParser.java
index 5830037..326fbf0 100755
--- a/ssl-proxy/src/test/java/org/globus/security/util/TestSigningPolicyFileParser.java
+++ b/ssl-proxy/src/test/java/org/globus/security/util/TestSigningPolicyFileParser.java
@@ -27,12 +27,13 @@ import org.globus.security.SigningPolicy;
 import org.globus.security.SigningPolicyException;
 import org.globus.security.filestore.FileSetupUtil;
 
-import static org.testng.AssertJUnit.assertFalse;
-import static org.testng.AssertJUnit.assertTrue;
 import org.testng.annotations.AfterTest;
 import org.testng.annotations.BeforeTest;
 import org.testng.annotations.Test;
 
+import static org.testng.AssertJUnit.assertFalse;
+import static org.testng.AssertJUnit.assertTrue;
+
 @Test(groups = {"Util"})
 public class TestSigningPolicyFileParser {
 
-- 
1.6.3.2

